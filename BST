class Node {
    int data;
    Node left, right;

    // Constructor
    public Node(int value) {
        data = value;
        left = right = null;
    }
}

class BinarySearchTree {
    Node root;

    // Insert a new node
    void insert(int value) {
        root = insertRec(root, value);
    }

    // Recursive insert function
    Node insertRec(Node root, int value) {
        if (root == null) {
            root = new Node(value);
            return root;
        }

        if (value < root.data)
            root.left = insertRec(root.left, value);
        else if (value > root.data)
            root.right = insertRec(root.right, value);

        return root;
    }

    // Search a value in the BST
    boolean search(int value) {
        return searchRec(root, value);
    }

    boolean searchRec(Node root, int value) {
        if (root == null)
            return false;
        if (root.data == value)
            return true;
        if (value < root.data)
            return searchRec(root.left, value);
        else
            return searchRec(root.right, value);
    }

    // Inorder traversal (Left, Root, Right)
    void inorder() {
        inorderRec(root);
    }

    void inorderRec(Node root) {
        if (root != null) {
            inorderRec(root.left);
            System.out.print(root.data + " ");
            inorderRec(root.right);
        }
    }

    // Main method
    public static void main(String[] args) {
        BinarySearchTree bst = new BinarySearchTree();

        bst.insert(50);
        bst.insert(30);
        bst.insert(70);
        bst.insert(20);
        bst.insert(40);
        bst.insert(60);
        bst.insert(80);

        System.out.println("Inorder Traversal:");
        bst.inorder();

        System.out.println("\nSearch 40: " + bst.search(40));  // true
        System.out.println("Search 90: " + bst.search(90));  // false
    }
}
